extends layout3.pug

block contenido
        header
        
            nav(class="navegacion2")

                div(name="titular")
                    h1 Mis evaluaciones 

                ul(class="menu2")
                    li  
                        a(href="/profile/crearEv") Crear evaluación
                    li
                        a(href="/profile") Evaluaciones
                
                if(user && file)

                    div(class="infousuario")
                        h5(name = "bar2")= user.nombre
                        p="Organización: " + user.org 
                        p(id="identificacion")="Identificación: " + user.identificacion
                        p="Fecha de reporte: " + file.fecha
                        p= "Hora de inicio: " + file.hora_in  + " - "+ "Hora de finalización: " + file.hora_fin
                        div(class="btn_regresar" id=btn_regresar)
                            a(href=("/profile/watch/" + user.identificacion)  class="btn btn-dark") Regresar
                        
                    div(class="space10px")

                    div(class="graficas")
                        canvas(id="mychart")
                    script.
                        var file = JSON.parse('!{JSON.stringify(file)}');                
                        var ctx = document.getElementById("mychart").getContext("2d");

                        var myChar = new Chart(ctx, {
                            type: 'line',
                            data: {
                                labels: file.hora,
                                datasets:[{
                                    label: 'Ruido (dB)',
                                    data: file.ruido,
                                    backgroundColor: "rgba(255,153,0,0.8)"
                                },
                                {
                                    label: 'Luminosidad (lx)',
                                    data: file.luz,
                                    backgroundColor: "rgba(30,112,51,0.8)"
                                },
                                {
                                    label: 'humedad relativa (%)',
                                    data: file.humedad,
                                    backgroundColor: "rgba(30, 82, 112, 0.8)"
                                },
                                {
                                    label: 'temperatura (°C)',
                                    data: file.temperatura,
                                    backgroundColor: "rgba(220, 177, 42, 1)"
                                }]
                            }
                        });

                    div(class="space10px")

                    div(class="general")
                        h5(id ="info") Información
                        
                        if(opciones)
                            
                            each opcion in opciones
                                div(class="contenedor")
                                    div(class="información-general")
                                        if(opcion == "luz")
                                            h5= "Luminosidad"
                                        else if(opcion == "ruido")
                                            h5= "Ruido"
                                        else if(opcion == "humedad")
                                            h5= "Humedad"
                                        else if(opcion == "temperatura")
                                            h5= "Temperatura"  
                                        else if(opcion == "emg")
                                            h5= "Electromiografía"
                                        else
                                            h5= opcion 
                                    div(class="formulario")
                                        ul
                                            li 
                                                p Tiempo inicial: 
                                            li
                                                div(class="form-floating mb-3")
                                                    input(type="number" name =("horas_in_" + opcion) min="0" max="23" step="1" class="form-control" id="floatingInput" placeholder="Hora")
                                                    label(for=("horas_in_" + opcion)) Horas
                                            li
                                                div(class="form-floating mb-3")
                                                    input(type="number" name = ("minutos_in_" + opcion) min="0" max="59" step="1" class="form-control" id="floatingInput" placeholder="Minuto")
                                                    label(for=("minutos_in_" + opcion)) Minuto
                                            if(fileemg && opcion == "emg")
                                                li 
                                                    div(class="form-floating mb-3")
                                                        input(type="number" name = ("segundos_in_" + opcion) min="0" max="59" step="1" class="form-control" id="floatingInput" placeholder="Segundos")
                                                        label(for=("segundos_in_" + opcion)) Segundo      
                                                br

                                            li 
                                                p Tiempo final:
                                            li
                                                div(class="form-floating mb-3")
                                                    input(type="number" name = ("horas_fin_"+opcion) min="0" max="23" step="1" class="form-control" id="floatingInput" placeholder="Hora")
                                                    label(for=("horas_fin_"+opcion)) Horas                                     
                                            li
                                                div(class="form-floating mb-3")
                                                    input(type="number" name = ("minutos_fin_" + opcion) min="0" max="59" step="1" class="form-control" id="floatingInput" placeholder="Minuto")
                                                    label(for=("minutos_fin_" + opcion)) Minuto
                                            if(fileemg && opcion == "emg")
                                                li 
                                                    div(class="form-floating mb-3")
                                                        input(type="number" name = ("segundos_fin_" + opcion) width= "30px" min="0" max="59" step="1" class="form-control" id="floatingInput" placeholder="Segundos")
                                                        label(for=("segundos_fin_" + opcion)) Segundo        
                                            li
                                                div(class="btn_proc")
                                                    a(class="btn btn-dark" id="mostrar_" + opcion) Mostrar



                                    div(class="graficos" id="graficos_" + opcion)
                                        h5 Gráficos
                                        div(class="ref" id="ref_"+ opcion)
                                            ul 
                                                li 
                                                    div(class="form-floating mb-3")
                                                        input(type="number" name = ("referencia_min_" + opcion) step="0.1" class="form-control" id="floatingInput" placeholder="Referencia")
                                                        label(for=("referencia_min_" + opcion)) Mínimo        
                                                li 
                                                    div(class="form-floating mb-3")
                                                        input(type="number" name = ("referencia_max_" + opcion) step="0.1" class="form-control" id="floatingInput" placeholder="Referencia")
                                                        label(for=("referencia_max_" + opcion)) Máximo       
                                                li
                                                    button(class="btn btn-dark" id="btn_ref_" + opcion) Fijar


                                        if(fileemg && opcion == "emg")
                                            
                                            div(class="space10px")

                                            div(class="grafica1")
                                                canvas(id="grafica1_"+opcion)
                                        
                                            div(class="grafica1")
                                                canvas(id="grafica1b_"+opcion)
                                                
                                            div(class="imagen_grafica1")
                                                div(class="content_img")
                                                    <button class="bra1" id="dec"><</button>
                                                    img(src="" id = "image_ref")
                                                    <button class="bra2" id="inc"> > </button>

                                            div(class="graficas_stats1" id= "graficas_stats1_" + opcion)  

                            
                                                h5 Reporte porcentaje de tiempo en cada nivel de esfuerzo

                                                table 
                                                    tr 
                                                        th  
                                                        th Porcentaje de tiempo  
                                                    tr 
                                                        td Tiempo esfuerzo bajo < 30% CMV
                                                        td= fileemg.esfuerzo[0] + '%'
                                                    tr 
                                                        td Tiempo esfuerzo medio < 60% CMV
                                                        td= fileemg.esfuerzo[1] + '%'
                                                    tr 
                                                        td Tiempo esfuerzo alto > 60% CMV
                                                        td= fileemg.esfuerzo[2] + '%'
                                                
                                                br

                                                h5 Reporte cantidad de acciones y tiempo total de esfuerzo

                                                table 
                                                    tr 
                                                        th  
                                                        th Esfuerzo bajo 
                                                        th Esfuerzo Alto 
                                                    tr 
                                                        td Acciones dinámicas
                                                        td= fileemg.esfuerzo_bajo_alto[0][0]
                                                        td= fileemg.esfuerzo_bajo_alto[0][1]
                                                    tr 
                                                        td Acciones estáticas
                                                        td= fileemg.esfuerzo_bajo_alto[1][0]
                                                        td= fileemg.esfuerzo_bajo_alto[1][1]
                                                    tr 
                                                        td Tiempo total de esfuerzo
                                                        td= fileemg.esfuerzo_bajo_alto[2][0]
                                                        td= fileemg.esfuerzo_bajo_alto[2][1]


                                                br

                                                h5 Reporte promedios de acciones x Minuto y máximos en lapsos de 10 minutos canal 1

                                                table 
                                                    tr 
                                                        th  
                                                        th Promedio acciones por minutos 
                                                        th Promedio de máximos esfuerzos
                                                    tr 
                                                        td Lapso de tiempo (00-10) min
                                                        td= fileemg.promedio[0][0] + ' x min'
                                                        td= fileemg.promedio[0][1] + '%'
                                                    tr 
                                                        td Lapso de tiempo (10-20) min
                                                        td= fileemg.promedio[1][0] + ' x min'
                                                        td= fileemg.promedio[1][1] + '%'
                                                    tr 
                                                        td Lapso de tiempo (20-30) min
                                                        td= fileemg.promedio[2][0] + ' x min'
                                                        td= fileemg.promedio[2][1] + '%'
                                                    tr 
                                                        td Lapso de tiempo (30-40) min
                                                        td= fileemg.promedio[3][0] + ' x min'
                                                        td= fileemg.promedio[3][1] + '%'
                                                    tr 
                                                        td Lapso de tiempo (40-50) min
                                                        td= fileemg.promedio[4][0] + ' x min'
                                                        td= fileemg.promedio[4][1] + '%'
                                                
                                        else
                                                                                
                                            div(class="grafica1")
                                                canvas(id="grafica1_"+opcion)

                                            div(class="graficas_stats1" id= "graficas_stats1_" + opcion)
                                                ul 
                                                    li 
                                                        h6 Datos segmentados
                                                        canvas(id="grafica2_" + opcion)
                                                    li 
                                                        h6 Datos totales
                                                        canvas(id="grafica3_" + opcion)
                                                    //li
                                                    //  h6 Información
                                                    //  p(id = "informacion_"+ opcion) 
                                                    
                                    div(class="espaciado")   

                        div(class="contenedor")
                            div(class="información-general")
                                h5 Análisis postural 
                                br
                                div(class="pasos")
                                    h5 Paso 
                                    h5(class="numero_paso" id="paso1") 1

                                br
                                br
                                form(action=("http://" + FLASK_IP + ":7000/upload") method="post" enctype="multipart/form-data")
                                    <div class="form-group">
                                        <label for="imagen">Suba el archivo a analizar</label>
                                        <input type="file" class="form-control-file" id="imagen" name="imagen" required >
                                    </div>
                                    input(type="hidden" name="post_id" value=(user.identificacion))
                                    input(type="hidden" name="post_dir" value=(filenames))
                                    br
                                    button(type="submit" class="btn btn-dark") Subir
                                br
                                br

                                if(user.filename && user.filename != "")  

                                    div(class="pasos")
                                        h5 Paso 
                                        h5(class="numero_paso" id="paso2") 2
                                    br 
                                    br

                                    div(class="paso2")
                                        h6 Acciones: 
                                        a(class="btn btn-dark" id="procesar_imagen") Procesar

                                    br

                                    div(class="imagen_postural" id="imagen_postural")
                                        ul 
                                            li 
                                                div
                                                    h6 Imagen original
                                                    br
                                                    img(id="imagen_no_process" src="")
                                            li 
                                                div
                                                    h6 Imagen con Análisis postural
                                                    br
                                                    img(id="imagen_process" src="")

                                        div(class="Tabla_angulos")
                                            
                                            h5 Análisis fotográfico

                                            table 
                                                tr  
                                                    th Zona evaluada
                                                    th Rango aceptable 
                                                    th Resultado 
                                                tr 
                                                    td Flexión de Codo derecho
                                                    td 90°
                                                    td=user.angles_filename[0]
                                                tr 
                                                    td Flexión de Codo izquierdo
                                                    td 90°
                                                    td=user.angles_filename[1]
                                                tr 
                                                    td Flexión de Rodilla derecha
                                                    td 90°
                                                    td=user.angles_filename[2]
                                                tr 
                                                    td Flexión de Rodilla izquierda
                                                    td 90°
                                                    td=user.angles_filename[3]
                                                tr 
                                                    td Flexión de Cadera 
                                                    td 90°
                                                    td=user.angles_filename[4]
                                                tr 
                                                    td Flexión de Cuello 
                                                    td 0°
                                                    td=user.angles_filename[5]

                            div(class="espaciado2")

                        div(class="contenedor")
                            div(class="información-general")
                                h5 Imprimir o guardar 
                                br
                                div(class="paso2")
                                    a(class="btn btn-dark" id="imprimir") Imprimir

        script.



            const btn_luz = document.getElementById('mostrar_luz');
            const btn_temp = document.getElementById('mostrar_temperatura');
            const btn_ruido = document.getElementById('mostrar_ruido');
            const btn_humedad= document.getElementById('mostrar_humedad');
            const btn_emg = document.getElementById('mostrar_emg');
            let chart1l,chart2l,chart3l;
            let chart1r,chart2r,chart3r;
            let chart1t,chart2t,chart3t;
            let chart1e,chart1eb,chart2e,chart3e;
            let chart1h,chart2h,chart3h;   

            btn_temp.addEventListener("click", ()=>{
                mainf3("temperatura");
            });

            
            btn_humedad.addEventListener("click", ()=>{
                mainf4 ("humedad");
            });

            btn_luz.addEventListener("click", ()=>{
                mainf2("luz");
            });

            btn_ruido.addEventListener("click", ()=>{
                mainf("ruido");
            });

            btn_emg.addEventListener("click", ()=>{
                mainfe("emg");
            });

            function mainfe(opcion){
                let ids = {};
                ids.horasin = 'horas_in_' + opcion;
                ids.horasfin = 'horas_fin_' + opcion;
                ids.minin = 'minutos_in_' + opcion;
                ids.minfin = 'minutos_fin_' + opcion;
                ids.segin = 'segundos_in_' + opcion;
                ids.segfin = 'segundos_fin_' + opcion;
                ids.btnref = 'btn_ref_' + opcion;
                ids.ref = 'ref_' + opcion;
                ids.graficos = 'graficos_' + opcion;
                ids.graficas_stats1 = 'graficas_stats1_' + opcion;
                ids.grafica1 = 'grafica1_' + opcion;
                ids.grafica1b = 'grafica1b_' + opcion;
                ids.grafica2 = 'grafica2_' + opcion;
                ids.grafica3 = 'grafica3_' + opcion;
                ids.referencia_max = 'referencia_max_' + opcion;
                ids.referencia_min = 'referencia_min_' + opcion;
                ids.btn_source = "mostrar_" + opcion;
                var hora_in = "";
                var hora_fin = "";
                var minuto_in = "";
                var minuto_fin = "";
                var num = 0;
                hora_in = document.getElementsByName(ids.horasin)[0].value;
                hora_fin = document.getElementsByName(ids.horasfin)[0].value;
                minuto_in = document.getElementsByName(ids.minin)[0].value;
                minuto_fin = document.getElementsByName(ids.minfin)[0].value;
                segundo_in = document.getElementsByName(ids.segin)[0].value;
                segundo_fin = document.getElementsByName(ids.segfin)[0].value;

                const btn_ref = document.getElementById(ids.btnref);
                const ref_element = document.getElementById(ids.ref);
                ref_element.style.display = "block";
                const graficos = document.getElementById(ids.graficos);
                const graficos_stats = document.getElementById(ids.graficas_stats1);
                graficos.style.display = "block";
                //graficos_stats.style.display = "none";
                let variable;
                let label_var,label_var_min,label_var_max ;

                variable1 = "#{fileemg.cmv_r}";
                variable2 = "#{file.angx}";
                variable3 = "#{file.angy}";
                label_var1 = "Electromiografía (CMV)";
                label_var2 = "Angulos en x (°)";
                label_var3 = "Angulos en y (°)";
                label_var_min = "Mínimo emg";
                label_var_max = "Máximo emg";


                variable1 = variable1.split(",");
                variable2 = variable2.split(",");
                variable3 = variable3.split(",");

                if(hora_in.length == 1){
                    hora_in = '0' + hora_in;
                }
                if(hora_fin.length == 1){
                    hora_fin = '0' + hora_fin;
                }
                if(minuto_in.length == 1){
                    minuto_in = '0' + minuto_in;
                }
                if(minuto_fin.length == 1){
                    minuto_fin = '0' + minuto_fin;
                }
                if(segundo_in.length == 1){
                    segundo_in = '0' + segundo_in;
                }
                if(segundo_fin.length == 1){
                    segundo_fin = '0' + segundo_fin;
                }
                var salida = getDatosemg(variable1,variable2,variable3,hora_in,minuto_in,hora_fin,minuto_fin,segundo_in,segundo_fin);
                s_horas_e = salida.horas;
                s_datos_ea = salida.datos1;
                s_datos_eb = salida.datos2;
                s_datos_ec = salida.datos3;

                var req = {
                            type: 'line',
                            data: {
                                labels: s_horas_e,
                                datasets:[
                                    {
                                        label: label_var1,
                                        data: s_datos_ea,
                                        backgroundColor: "rgba(255,153,0,0.8)",
                                        pointRadius:2,
                                        borderColor: 'rgba(255, 153, 0,0.3)',
                                        tension: 0.2
                                    }
                                ]
                            }
                        }
                var reqb = {
                            type: 'line',
                            data: {
                                labels: s_horas_e,
                                datasets:[
                                    {
                                        label: label_var2,
                                        data: s_datos_eb,
                                        backgroundColor: "rgba(253, 15, 241, 0.8)",
                                        pointRadius:2,
                                        borderColor: 'rgba(253, 15, 241, 0.3)',
                                        tension: 0.2
                                    },
                                    {
                                        label: label_var3,
                                        data: s_datos_ec,
                                        backgroundColor: "rgba(15, 90, 253, 0.8)",
                                        pointRadius:2,
                                        borderColor: 'rgba(15, 90, 253, 0.3)',
                                        tension: 0.2
                                    }
                                ]
                            }
                        }
                graficar1(opcion,ids.grafica1,req);
                graficar1b(opcion,ids.grafica1b,reqb);               

                //IMAGEN
                
                //let hora_inicial = hora_in + ":" + minuto_in + ":" + segundo_in;
                //let hora_finale = hora_fin + ":" + minuto_fin + ":" + segundo_fin;               
                let hora_inicial = s_horas_e[0];
                let hora_finale = s_horas_e[s_horas_e.length - 1];
                let count = 0;


                const imagen = document.getElementById("image_ref");
                const dec = document.getElementById("dec");
                const inc = document.getElementById("inc");
                let link = "/profile/watch/img/" + "#{user.identificacion}" + "/" +"#{filenames}" + "__" + hora_inicial + "__" + hora_finale;
                imagen.setAttribute("src",link);
                
                dec.addEventListener("click", ()=> {
                    count = count - 1;
                    let link = "/profile/watch/img/" + "#{user.identificacion}" + "/" +"#{filenames}" + "__" + hora_inicial + "__" + hora_finale + "__" + count;
                    imagen.setAttribute("src",link);

                });

                inc.addEventListener("click", ()=>{
                    count = count + 1;
                    let link = "/profile/watch/img/" + "#{user.identificacion}" + "/" +"#{filenames}" + "__" + hora_inicial + "__" + hora_finale + "__" + count;
                    imagen.setAttribute("src",link);
                });

                btn_ref.addEventListener("click", ()=>{
                    const referencia_max = document.getElementsByName(ids.referencia_max)[0].value;
                    const referencia_min = document.getElementsByName(ids.referencia_min)[0].value;
                    if(referencia_max != "" && referencia_min != "" && referencia_min < referencia_max){

                        //const graficos_stats = document.getElementById(ids.graficas_stats1);
                        //graficos_stats.style.display = "block";
                        let tamaño = s_horas_e.length;
                        var array_ref_max = new Array(tamaño);
                        array_ref_max.fill(referencia_max,0,tamaño);
                        var array_ref_min = new Array(tamaño);
                        array_ref_min.fill(referencia_min,0,tamaño);
                        req = {
                                type: 'line',
                                data: {
                                    labels: s_horas_e,
                                    datasets:[{
                                        label: label_var1,
                                        data: s_datos_ea,
                                        backgroundColor: "rgba(255,153,0,0.8)",
                                        pointRadius:2,
                                        borderColor: 'rgba(255, 153, 0,0.3)',
                                        tension: 0.2
                                    },
                                    {
                                        label: label_var_min,
                                        data: array_ref_min,
                                        backgroundColor: "rgba(42,142,26,0)",
                                        pointRadius:1,
                                        borderColor: 'rgb(75, 192, 120)'
                                    },
                                    {
                                        label: label_var_max,
                                        data: array_ref_max,
                                        backgroundColor: "rgba(242, 16, 16, 0)",
                                        pointRadius:1,
                                        borderColor: 'rgba(242, 16, 16)'  
                                    }]
                                }
                            }
                        graficar1(opcion,ids.grafica1,req);

                    }
                });
            }

            function mainf3(opcion){
                let ids = {};
                ids.horasin = 'horas_in_' + opcion;
                ids.horasfin = 'horas_fin_' + opcion;
                ids.minin = 'minutos_in_' + opcion;
                ids.minfin = 'minutos_fin_' + opcion;
                ids.btnref = 'btn_ref_' + opcion;
                ids.ref = 'ref_' + opcion;
                ids.graficos = 'graficos_' + opcion;
                ids.graficas_stats1 = 'graficas_stats1_' + opcion;
                ids.grafica1 = 'grafica1_' + opcion;
                ids.grafica2 = 'grafica2_' + opcion;
                ids.grafica3 = 'grafica3_' + opcion;
                ids.referencia_max = 'referencia_max_' + opcion;
                ids.referencia_min = 'referencia_min_' + opcion;
                ids.btn_source = "mostrar_" + opcion;
                var hora_in = "";
                var hora_fin = "";
                var minuto_in = "";
                var minuto_fin = "";
                var num = 0;
                hora_in = document.getElementsByName(ids.horasin)[0].value;
                hora_fin = document.getElementsByName(ids.horasfin)[0].value;
                minuto_in = document.getElementsByName(ids.minin)[0].value;
                minuto_fin = document.getElementsByName(ids.minfin)[0].value;

                const btn_ref = document.getElementById(ids.btnref);
                const ref_element = document.getElementById(ids.ref);
                ref_element.style.display = "block";
                const graficos = document.getElementById(ids.graficos);
                const graficos_stats = document.getElementById(ids.graficas_stats1);
                graficos.style.display = "block";
                graficos_stats.style.display = "none";
                let variable;
                let label_var,label_var_min,label_var_max ;
                switch(opcion){
                    case "luz":
                        variable = "#{file.luz}";
                        label_var = "luminosidad (Lx)";
                        label_var_min = "Mínima luminosidad";
                        label_var_max = "Máxima luminosidad";
                        break;
                    case "ruido":
                        variable = "#{file.ruido}";
                        label_var = "Ruido (dB)";
                        label_var_min = "Mínimo ruido";
                        label_var_max = "Máxima ruido";
                        break;
                    case "temperatura":
                        variable = "#{file.temperatura}";
                        label_var = "Temperatura (°C)";
                        label_var_min = "Mínima temperatura";
                        label_var_max = "Máxima temperatura";
                        break;  
                }

                variable = variable.split(",");
                if(hora_in.length == 1){
                    hora_in = '0' + hora_in;
                }
                if(hora_fin.length == 1){
                    hora_fin = '0' + hora_fin;
                }
                if(minuto_in.length == 1){
                    minuto_in = '0' + minuto_in;
                }
                if(minuto_fin.length == 1){
                    minuto_fin = '0' + minuto_fin;
                }
                var salida = getDatos(variable,hora_in,minuto_in,hora_fin,minuto_fin);
                s_horas_3 = salida.horas;
                s_datos_3 = salida.datos;
                var req = {
                            type: 'line',
                            data: {
                                labels: s_horas_3,
                                datasets:[{
                                    label: label_var,
                                    data: s_datos_3,
                                    backgroundColor: "rgba(255,153,0,0.8)",
                                    pointRadius:2,
                                    borderColor: 'rgba(255, 153, 0,0.3)',
                                    tension: 0.2
                                }]
                            }
                        }
                graficar1(opcion,ids.grafica1,req);

                btn_ref.addEventListener("click", ()=>{
                    const referencia_max = document.getElementsByName(ids.referencia_max)[0].value;
                    const referencia_min = document.getElementsByName(ids.referencia_min)[0].value;
                    if(referencia_max != "" && referencia_min != "" && referencia_min < referencia_max){

                        const graficos_stats = document.getElementById(ids.graficas_stats1);
                        graficos_stats.style.display = "block";
                        let tamaño = s_horas_3.length;
                        var array_ref_max = new Array(tamaño);
                        array_ref_max.fill(referencia_max,0,tamaño);
                        var array_ref_min = new Array(tamaño);
                        array_ref_min.fill(referencia_min,0,tamaño);
                        req = {
                                type: 'line',
                                data: {
                                    labels: s_horas_3,
                                    datasets:[{
                                        label: label_var,
                                        data: s_datos_3,
                                        backgroundColor: "rgba(255,153,0,0.8)",
                                        pointRadius:2,
                                        borderColor: 'rgba(255, 153, 0,0.3)',
                                        tension: 0.2
                                    },
                                    {
                                        label: label_var_min,
                                        data: array_ref_min,
                                        backgroundColor: "rgba(42,142,26,0)",
                                        pointRadius:1,
                                        borderColor: 'rgb(75, 192, 120)'
                                    },
                                    {
                                        label: label_var_max,
                                        data: array_ref_max,
                                        backgroundColor: "rgba(242, 16, 16, 0)",
                                        pointRadius:1,
                                        borderColor: 'rgba(242, 16, 16)'  
                                    }]
                                }
                            }
                        graficar1(opcion,ids.grafica1,req);

                        var p1 = getPorcentaje(referencia_min,referencia_max,s_datos_3);
                        var p2 = getPorcentaje(referencia_min,referencia_max,variable);
                        let textos = [];
                        let unidad;
                        switch(opcion){
                            case "ruido":
                                unidad = "dB";
                                break;
                            case "luz":
                                unidad = "Lx";
                                break;
                            case "temperatura":
                                unidad = "°C";
                                break;
                        }

                        textos.push("Menores a " + referencia_min + " " +unidad);
                        textos.push("Entre " + referencia_min  + " " + unidad + " y " + referencia_max + " " +unidad);
                        textos.push("mayores a " + referencia_max + " " +unidad);


                        const req2 = {
                                type: 'pie',
                                data: {
                                    labels: textos,
                                    datasets:[{
                                        data: p1,
                                        backgroundColor: [
                                            'rgb(233, 76, 59)',
                                            'rgb(0, 119, 149)',
                                            'rgb(171, 200, 198)'
                                        ],
                                        hoverOffset: 4,
                                        datalabels: {
                                            color: "black",
                                            font: {
                                                size: 14
                                            },
                                            anchor: "end",
                                            backgroundColor: "white",
                                            borderColor: "black",
                                            borderRadius: 1,
                                            borderWidth: 1,
                                            formatter: function(value, context) {
                                                return value + '%';
                                            }
                                        }
                                    }]
                                },
                                options: {
                                    plugins: {
                                        legend: {
                                            display: false
                                        },
                                        datalabels: {

                                        }
                                    }
                                },
                                plugins: [ChartDataLabels],
                                    options: {
                                        layout:{
                                            padding: 10
                                        }
                                    }
                            } 
                        
                        const req3 = {
                                type: 'pie',
                                data: {
                                    labels: textos,
                                    datasets:[{
                                        data: p2,
                                        backgroundColor: [
                                            'rgb(233, 76, 59)',
                                            'rgb(0, 119, 149)',
                                            'rgb(171, 200, 198)'
                                        ],
                                        hoverOffset: 4,
                                        datalabels: {
                                            color: "black",
                                            font: {
                                                size: 14
                                            },
                                            anchor: "end",
                                            backgroundColor: "white",
                                            borderColor: "black",
                                            borderRadius: 1,
                                            borderWidth: 1,
                                            formatter: function(value, context) {
                                                    return value + '%';
                                            }
                                        }
                                    }]
                                },
                                options: {
                                    plugins: {
                                        legend: {
                                            display: false
                                        },
                                        datalabels: {

                                        }
                                    }
                                },
                                plugins: [ChartDataLabels],
                                    options: {
                                        layout:{
                                            padding: 10
                                        }   
                                    }
                            } 

                        graficar2(opcion,ids.grafica2,req2);
                        graficar3(opcion,ids.grafica3,req3);

                    }
                });
            }

            function mainf4(opcion){
                let ids = {};
                ids.horasin = 'horas_in_' + opcion;
                ids.horasfin = 'horas_fin_' + opcion;
                ids.minin = 'minutos_in_' + opcion;
                ids.minfin = 'minutos_fin_' + opcion;
                ids.btnref = 'btn_ref_' + opcion;
                ids.ref = 'ref_' + opcion;
                ids.graficos = 'graficos_' + opcion;
                ids.graficas_stats1 = 'graficas_stats1_' + opcion;
                ids.grafica1 = 'grafica1_' + opcion;
                ids.grafica2 = 'grafica2_' + opcion;
                ids.grafica3 = 'grafica3_' + opcion;
                ids.referencia_max = 'referencia_max_' + opcion;
                ids.referencia_min = 'referencia_min_' + opcion;
                ids.btn_source = "mostrar_" + opcion;
                var hora_in = "";
                var hora_fin = "";
                var minuto_in = "";
                var minuto_fin = "";
                var num = 0;
                hora_in = document.getElementsByName(ids.horasin)[0].value;
                hora_fin = document.getElementsByName(ids.horasfin)[0].value;
                minuto_in = document.getElementsByName(ids.minin)[0].value;
                minuto_fin = document.getElementsByName(ids.minfin)[0].value;

                const btn_ref = document.getElementById(ids.btnref);
                const ref_element = document.getElementById(ids.ref);
                ref_element.style.display = "block";
                const graficos = document.getElementById(ids.graficos);
                const graficos_stats = document.getElementById(ids.graficas_stats1);
                graficos.style.display = "block";
                graficos_stats.style.display = "none";
                let variable;
                let label_var,label_var_min,label_var_max ;
                switch(opcion){
                    case "luz":
                        variable = "#{file.luz}";
                        label_var = "luminosidad (Lx)";
                        label_var_min = "Mínima luminosidad";
                        label_var_max = "Máxima luminosidad";
                        break;
                    case "ruido":
                        variable = "#{file.ruido}";
                        label_var = "Ruido (dB)";
                        label_var_min = "Mínimo ruido";
                        label_var_max = "Máxima ruido";
                        break;
                    case "temperatura":
                        variable = "#{file.temperatura}";
                        label_var = "Temperatura (°C)";
                        label_var_min = "Mínima temperatura";
                        label_var_max = "Máxima temperatura";
                        break;  
                    case "humedad":
                        variable = "#{file.humedad}";
                        label_var = "Humedad relativa (%)";
                        label_var_min = "Mínima humedad";
                        label_var_max = "Máxima humedad";
                        break;    
                }

                variable = variable.split(",");
                if(hora_in.length == 1){
                    hora_in = '0' + hora_in;
                }
                if(hora_fin.length == 1){
                    hora_fin = '0' + hora_fin;
                }
                if(minuto_in.length == 1){
                    minuto_in = '0' + minuto_in;
                }
                if(minuto_fin.length == 1){
                    minuto_fin = '0' + minuto_fin;
                }
                var salida = getDatos(variable,hora_in,minuto_in,hora_fin,minuto_fin);
                s_horas_3 = salida.horas;
                s_datos_3 = salida.datos;
                var req = {
                            type: 'line',
                            data: {
                                labels: s_horas_3,
                                datasets:[{
                                    label: label_var,
                                    data: s_datos_3,
                                    backgroundColor: "rgba(255,153,0,0.8)",
                                    pointRadius:2,
                                    borderColor: 'rgba(255, 153, 0,0.3)',
                                    tension: 0.2
                                }]
                            }
                        }
                graficar1(opcion,ids.grafica1,req);

                btn_ref.addEventListener("click", ()=>{
                    const referencia_max = document.getElementsByName(ids.referencia_max)[0].value;
                    const referencia_min = document.getElementsByName(ids.referencia_min)[0].value;
                    if(referencia_max != "" && referencia_min != "" && referencia_min < referencia_max){

                        const graficos_stats = document.getElementById(ids.graficas_stats1);
                        graficos_stats.style.display = "block";
                        let tamaño = s_horas_3.length;
                        var array_ref_max = new Array(tamaño);
                        array_ref_max.fill(referencia_max,0,tamaño);
                        var array_ref_min = new Array(tamaño);
                        array_ref_min.fill(referencia_min,0,tamaño);
                        req = {
                                type: 'line',
                                data: {
                                    labels: s_horas_3,
                                    datasets:[{
                                        label: label_var,
                                        data: s_datos_3,
                                        backgroundColor: "rgba(255,153,0,0.8)",
                                        pointRadius:2,
                                        borderColor: 'rgba(255, 153, 0,0.3)',
                                        tension: 0.2
                                    },
                                    {
                                        label: label_var_min,
                                        data: array_ref_min,
                                        backgroundColor: "rgba(42,142,26,0)",
                                        pointRadius:1,
                                        borderColor: 'rgb(75, 192, 120)'
                                    },
                                    {
                                        label: label_var_max,
                                        data: array_ref_max,
                                        backgroundColor: "rgba(242, 16, 16, 0)",
                                        pointRadius:1,
                                        borderColor: 'rgba(242, 16, 16)'  
                                    }]
                                }
                            }
                        graficar1(opcion,ids.grafica1,req);

                        var p1 = getPorcentaje(referencia_min,referencia_max,s_datos_3);
                        var p2 = getPorcentaje(referencia_min,referencia_max,variable);
                        let textos = [];
                        let unidad;
                        switch(opcion){
                            case "ruido":
                                unidad = "dB";
                                break;
                            case "luz":
                                unidad = "Lx";
                                break;
                            case "temperatura":
                                unidad = "°C";
                                break;
                            case "humedad":
                                unidad = "%";
                                break;
                        }

                        textos.push("Menores a " + referencia_min + " " +unidad);
                        textos.push("Entre " + referencia_min  + " " + unidad + " y " + referencia_max + " " +unidad);
                        textos.push("mayores a " + referencia_max + " " +unidad);


                        const req2 = {
                                type: 'pie',
                                data: {
                                    labels: textos,
                                    datasets:[{
                                        data: p1,
                                        backgroundColor: [
                                            'rgb(233, 76, 59)',
                                            'rgb(0, 119, 149)',
                                            'rgb(171, 200, 198)'
                                        ],
                                        hoverOffset: 4,
                                        datalabels: {
                                            color: "black",
                                            font: {
                                                size: 14
                                            },
                                            anchor: "end",
                                            backgroundColor: "white",
                                            borderColor: "black",
                                            borderRadius: 1,
                                            borderWidth: 1,
                                            formatter: function(value, context) {
                                                return value + '%';
                                            }
                                        }
                                    }]
                                },
                                options: {
                                    plugins: {
                                        legend: {
                                            display: false
                                        },
                                        datalabels: {

                                        }
                                    }
                                },
                                plugins: [ChartDataLabels],
                                    options: {
                                        layout:{
                                            padding: 10
                                        }
                                    }
                            } 
                        
                        const req3 = {
                                type: 'pie',
                                data: {
                                    labels: textos,
                                    datasets:[{
                                        data: p2,
                                        backgroundColor: [
                                            'rgb(233, 76, 59)',
                                            'rgb(0, 119, 149)',
                                            'rgb(171, 200, 198)'
                                        ],
                                        hoverOffset: 4,
                                        datalabels: {
                                            color: "black",
                                            font: {
                                                size: 14
                                            },
                                            anchor: "end",
                                            backgroundColor: "white",
                                            borderColor: "black",
                                            borderRadius: 1,
                                            borderWidth: 1,
                                            formatter: function(value, context) {
                                                    return value + '%';
                                            }
                                        }
                                    }]
                                },
                                options: {
                                    plugins: {
                                        legend: {
                                            display: false
                                        },
                                        datalabels: {

                                        }
                                    }
                                },
                                plugins: [ChartDataLabels],
                                    options: {
                                        layout:{
                                            padding: 10
                                        }   
                                    }
                            } 

                        graficar2(opcion,ids.grafica2,req2);
                        graficar3(opcion,ids.grafica3,req3);

                    }
                });
            }

            function mainf2(opcion){
                let ids = {};
                ids.horasin = 'horas_in_' + opcion;
                ids.horasfin = 'horas_fin_' + opcion;
                ids.minin = 'minutos_in_' + opcion;
                ids.minfin = 'minutos_fin_' + opcion;
                ids.btnref = 'btn_ref_' + opcion;
                ids.ref = 'ref_' + opcion;
                ids.graficos = 'graficos_' + opcion;
                ids.graficas_stats1 = 'graficas_stats1_' + opcion;
                ids.grafica1 = 'grafica1_' + opcion;
                ids.grafica2 = 'grafica2_' + opcion;
                ids.grafica3 = 'grafica3_' + opcion;
                ids.referencia_max = 'referencia_max_' + opcion;
                ids.referencia_min = 'referencia_min_' + opcion;
                ids.btn_source = "mostrar_" + opcion;
                var hora_in = "";
                var hora_fin = "";
                var minuto_in = "";
                var minuto_fin = "";
                var num = 0;
                hora_in = document.getElementsByName(ids.horasin)[0].value;
                hora_fin = document.getElementsByName(ids.horasfin)[0].value;
                minuto_in = document.getElementsByName(ids.minin)[0].value;
                minuto_fin = document.getElementsByName(ids.minfin)[0].value;

                const btn_ref = document.getElementById(ids.btnref);
                const ref_element = document.getElementById(ids.ref);
                ref_element.style.display = "block";
                const graficos = document.getElementById(ids.graficos);
                const graficos_stats = document.getElementById(ids.graficas_stats1);
                graficos.style.display = "block";
                graficos_stats.style.display = "none";
                let variable;
                let label_var,label_var_min,label_var_max ;
                switch(opcion){
                    case "luz":
                        variable = "#{file.luz}";
                        label_var = "luminosidad (Lx)";
                        label_var_min = "Mínima luminosidad";
                        label_var_max = "Máxima luminosidad";
                        break;
                    case "ruido":
                        variable = "#{file.ruido}";
                        label_var = "Ruido (dB)";
                        label_var_min = "Mínimo ruido";
                        label_var_max = "Máxima ruido";
                        break;
                    case "temperatura":
                        variable = "#{file.temperatura}";
                        label_var = "Temperatura (°C)";
                        label_var_min = "Mínima temperatura";
                        label_var_max = "Máxima temperatura";
                        break;  
                }

                variable = variable.split(",");
                if(hora_in.length == 1){
                    hora_in = '0' + hora_in;
                }
                if(hora_fin.length == 1){
                    hora_fin = '0' + hora_fin;
                }
                if(minuto_in.length == 1){
                    minuto_in = '0' + minuto_in;
                }
                if(minuto_fin.length == 1){
                    minuto_fin = '0' + minuto_fin;
                }
                var salida = getDatos(variable,hora_in,minuto_in,hora_fin,minuto_fin);
                s_horas_2 = salida.horas;
                s_datos_2 = salida.datos;
                var req = {
                            type: 'line',
                            data: {
                                labels: s_horas_2,
                                datasets:[{
                                    label: label_var,
                                    data: s_datos_2,
                                    backgroundColor: "rgba(255,153,0,0.8)",
                                    pointRadius:2,
                                    borderColor: 'rgba(255, 153, 0,0.3)',
                                    tension: 0.2
                                }]
                            }
                        }
                graficar1(opcion,ids.grafica1,req);

                btn_ref.addEventListener("click", ()=>{
                    const referencia_max = document.getElementsByName(ids.referencia_max)[0].value;
                    const referencia_min = document.getElementsByName(ids.referencia_min)[0].value;
                    if(referencia_max != "" && referencia_min != "" && referencia_min < referencia_max){

                        const graficos_stats = document.getElementById(ids.graficas_stats1);
                        graficos_stats.style.display = "block";
                        let tamaño = s_horas_2.length;
                        var array_ref_max = new Array(tamaño);
                        array_ref_max.fill(referencia_max,0,tamaño);
                        var array_ref_min = new Array(tamaño);
                        array_ref_min.fill(referencia_min,0,tamaño);
                        req = {
                                type: 'line',
                                data: {
                                    labels: s_horas_2,
                                    datasets:[{
                                        label: label_var,
                                        data: s_datos_2,
                                        backgroundColor: "rgba(255,153,0,0.8)",
                                        pointRadius:2,
                                        borderColor: 'rgba(255, 153, 0,0.3)',
                                        tension: 0.2
                                    },
                                    {
                                        label: label_var_min,
                                        data: array_ref_min,
                                        backgroundColor: "rgba(42,142,26,0)",
                                        pointRadius:1,
                                        borderColor: 'rgb(75, 192, 120)'
                                    },
                                    {
                                        label: label_var_max,
                                        data: array_ref_max,
                                        backgroundColor: "rgba(242, 16, 16, 0)",
                                        pointRadius:1,
                                        borderColor: 'rgba(242, 16, 16)'  
                                    }]
                                }
                            }
                        graficar1(opcion,ids.grafica1,req);

                        var p1 = getPorcentaje(referencia_min,referencia_max,s_datos_2);
                        var p2 = getPorcentaje(referencia_min,referencia_max,variable);
                        let textos = [];
                        let unidad;
                        switch(opcion){
                            case "ruido":
                                unidad = "dB";
                                break;
                            case "luz":
                                unidad = "Lx";
                                break;
                            case "temperatura":
                                unidad = "°C";
                                break;
                        }

                        textos.push("Menores a " + referencia_min + " " +unidad);
                        textos.push("Entre " + referencia_min  + " " + unidad + " y " + referencia_max + " " +unidad);
                        textos.push("mayores a " + referencia_max + " " +unidad);


                        const req2 = {
                                type: 'pie',
                                data: {
                                    labels: textos,
                                    datasets:[{
                                        data: p1,
                                        backgroundColor: [
                                            'rgb(233, 76, 59)',
                                            'rgb(0, 119, 149)',
                                            'rgb(171, 200, 198)'
                                        ],
                                        hoverOffset: 4,
                                        datalabels: {
                                            color: "black",
                                            font: {
                                                size: 14
                                            },
                                            anchor: "end",
                                            backgroundColor: "white",
                                            borderColor: "black",
                                            borderRadius: 1,
                                            borderWidth: 1,
                                            formatter: function(value, context) {
                                                return value + '%';
                                            }
                                        }
                                    }]
                                },
                                options: {
                                    plugins: {
                                        legend: {
                                            display: false
                                        },
                                        datalabels: {

                                        }
                                    }
                                },
                                plugins: [ChartDataLabels],
                                    options: {
                                        layout:{
                                            padding: 10
                                        }
                                    }
                            } 
                        
                        const req3 = {
                                type: 'pie',
                                data: {
                                    labels: textos,
                                    datasets:[{
                                        data: p2,
                                        backgroundColor: [
                                            'rgb(233, 76, 59)',
                                            'rgb(0, 119, 149)',
                                            'rgb(171, 200, 198)'
                                        ],
                                        hoverOffset: 4,
                                        datalabels: {
                                            color: "black",
                                            font: {
                                                size: 14
                                            },
                                            anchor: "end",
                                            backgroundColor: "white",
                                            borderColor: "black",
                                            borderRadius: 1,
                                            borderWidth: 1,
                                            formatter: function(value, context) {
                                                    return value + '%';
                                            }
                                        }
                                    }]
                                },
                                options: {
                                    plugins: {
                                        legend: {
                                            display: false
                                        },
                                        datalabels: {

                                        }
                                    }
                                },
                                plugins: [ChartDataLabels],
                                    options: {
                                        layout:{
                                            padding: 10
                                        }   
                                    }
                            } 

                        graficar2(opcion,ids.grafica2,req2);
                        graficar3(opcion,ids.grafica3,req3);

                    }
                });
            }

            function mainf(opcion){
                let ids = {};
                ids.horasin = 'horas_in_' + opcion;
                ids.horasfin = 'horas_fin_' + opcion;
                ids.minin = 'minutos_in_' + opcion;
                ids.minfin = 'minutos_fin_' + opcion;
                ids.btnref = 'btn_ref_' + opcion;
                ids.ref = 'ref_' + opcion;
                ids.graficos = 'graficos_' + opcion;
                ids.graficas_stats1 = 'graficas_stats1_' + opcion;
                ids.grafica1 = 'grafica1_' + opcion;
                ids.grafica2 = 'grafica2_' + opcion;
                ids.grafica3 = 'grafica3_' + opcion;
                ids.referencia_max = 'referencia_max_' + opcion;
                ids.referencia_min = 'referencia_min_' + opcion;
                ids.btn_source = "mostrar_" + opcion;
                var hora_in = "";
                var hora_fin = "";
                var minuto_in = "";
                var minuto_fin = "";
                var num = 0;
                hora_in = document.getElementsByName(ids.horasin)[0].value;
                hora_fin = document.getElementsByName(ids.horasfin)[0].value;
                minuto_in = document.getElementsByName(ids.minin)[0].value;
                minuto_fin = document.getElementsByName(ids.minfin)[0].value;

                const btn_ref = document.getElementById(ids.btnref);
                const ref_element = document.getElementById(ids.ref);
                ref_element.style.display = "block";
                const graficos = document.getElementById(ids.graficos);
                const graficos_stats = document.getElementById(ids.graficas_stats1);
                graficos.style.display = "block";
                graficos_stats.style.display = "none";
                let variable;
                let label_var,label_var_min,label_var_max ;
                switch(opcion){
                    case "luz":
                        variable = "#{file.luz}";
                        label_var = "luminosidad (Lx)";
                        label_var_min = "Mínima luminosidad";
                        label_var_max = "Máxima luminosidad";
                        break;
                    case "ruido":
                        variable = "#{file.ruido}";
                        label_var = "Ruido (dB)";
                        label_var_min = "Mínimo ruido";
                        label_var_max = "Máxima ruido";
                        break;
                    case "temperatura":
                        variable = "#{file.temperatura}";
                        label_var = "Temperatura (°C)";
                        label_var_min = "Mínima temperatura";
                        label_var_max = "Máxima temperatura";
                        break;  
                }

                variable = variable.split(",");
                if(hora_in.length == 1){
                    hora_in = '0' + hora_in;
                }
                if(hora_fin.length == 1){
                    hora_fin = '0' + hora_fin;
                }
                if(minuto_in.length == 1){
                    minuto_in = '0' + minuto_in;
                }
                if(minuto_fin.length == 1){
                    minuto_fin = '0' + minuto_fin;
                }
                var salida = getDatos(variable,hora_in,minuto_in,hora_fin,minuto_fin);
                s_horas = salida.horas;
                s_datos = salida.datos;
                var req = {
                            type: 'line',
                            data: {
                                labels: s_horas,
                                datasets:[{
                                    label: label_var,
                                    data: s_datos,
                                    backgroundColor: "rgba(255,153,0,0.8)",
                                    pointRadius:2,
                                    borderColor: 'rgba(255, 153, 0,0.3)',
                                    tension: 0.2
                                }]
                            }
                        }
                graficar1(opcion,ids.grafica1,req);

                btn_ref.addEventListener("click", ()=>{
                    const referencia_max = document.getElementsByName(ids.referencia_max)[0].value;
                    const referencia_min = document.getElementsByName(ids.referencia_min)[0].value;
                    if(referencia_max != "" && referencia_min != "" && referencia_min < referencia_max){

                        const graficos_stats = document.getElementById(ids.graficas_stats1);
                        graficos_stats.style.display = "block";
                        let tamaño = s_horas.length;
                        var array_ref_max = new Array(tamaño);
                        array_ref_max.fill(referencia_max,0,tamaño);
                        var array_ref_min = new Array(tamaño);
                        array_ref_min.fill(referencia_min,0,tamaño);
                        req = {
                                type: 'line',
                                data: {
                                    labels: s_horas,
                                    datasets:[{
                                        label: label_var,
                                        data: s_datos,
                                        backgroundColor: "rgba(255,153,0,0.8)",
                                        pointRadius:2,
                                        borderColor: 'rgba(255, 153, 0,0.3)',
                                        tension: 0.2
                                    },
                                    {
                                        label: label_var_min,
                                        data: array_ref_min,
                                        backgroundColor: "rgba(42,142,26,0)",
                                        pointRadius:1,
                                        borderColor: 'rgb(75, 192, 120)'
                                    },
                                    {
                                        label: label_var_max,
                                        data: array_ref_max,
                                        backgroundColor: "rgba(242, 16, 16, 0)",
                                        pointRadius:1,
                                        borderColor: 'rgba(242, 16, 16)'  
                                    }]
                                }
                            }
                        graficar1(opcion,ids.grafica1,req);

                        var p1 = getPorcentaje(referencia_min,referencia_max,s_datos);
                        var p2 = getPorcentaje(referencia_min,referencia_max,variable);
                        let textos = [];
                        let unidad;
                        switch(opcion){
                            case "ruido":
                                unidad = "dB";
                                break;
                            case "luz":
                                unidad = "Lx";
                                break;
                            case "temperatura":
                                unidad = "°C";
                                break;
                        }

                        

                        textos.push("Menores a " + referencia_min + " " +unidad);
                        textos.push("Entre " + referencia_min  + " " + unidad + " y " + referencia_max + " " +unidad);
                        textos.push("mayores a " + referencia_max + " " +unidad);


                        const req2 = {
                                type: 'pie',
                                data: {
                                    labels: textos,
                                    datasets:[{
                                        data: p1,
                                        backgroundColor: [
                                            'rgb(233, 76, 59)',
                                            'rgb(0, 119, 149)',
                                            'rgb(171, 200, 198)'
                                        ],
                                        hoverOffset: 4,
                                        datalabels: {
                                            color: "black",
                                            font: {
                                                size: 14
                                            },
                                            anchor: "end",
                                            backgroundColor: "white",
                                            borderColor: "black",
                                            borderRadius: 1,
                                            borderWidth: 1,
                                            formatter: function(value, context) {
                                                return value + '%';
                                            }
                                        }
                                    }]
                                },
                                options: {
                                    plugins: {
                                        legend: {
                                            display: false
                                        },
                                        datalabels: {

                                        }
                                    }
                                },
                                plugins: [ChartDataLabels],
                                    options: {
                                        layout:{
                                            padding: 10
                                        }
                                    }
                            } 
                        
                        const req3 = {
                                type: 'pie',
                                data: {
                                    labels: textos,
                                    datasets:[{
                                        data: p2,
                                        backgroundColor: [
                                            'rgb(233, 76, 59)',
                                            'rgb(0, 119, 149)',
                                            'rgb(171, 200, 198)'
                                        ],
                                        hoverOffset: 4,
                                        datalabels: {
                                            color: "black",
                                            font: {
                                                size: 14
                                            },
                                            anchor: "end",
                                            backgroundColor: "white",
                                            borderColor: "black",
                                            borderRadius: 1,
                                            borderWidth: 1,
                                            formatter: function(value, context) {
                                                    return value + '%';
                                            }
                                        }
                                    }]
                                },
                                options: {
                                    plugins: {
                                        legend: {
                                            display: false
                                        },
                                        datalabels: {

                                        }
                                    }
                                },
                                plugins: [ChartDataLabels],
                                    options: {
                                        layout:{
                                            padding: 10
                                        }   
                                    }
                            } 

                        graficar2(opcion,ids.grafica2,req2);
                        graficar3(opcion,ids.grafica3,req3);

                    }
                });
            }

            function getDatos(datos,hora1,minuto1,hora2,minuto2){

                var horas = "#{file.hora}";
                horas = horas.split(",");
                var deHora = [];
                var deMin = [];
                var horac = [];
                var ih1 = 0; 
                var im1 = 0;
                var ih2 = horas.length - 1;
                var im2 = horas.length - 1;
                horas.forEach(function(valor, indice, array){
                    var min = valor.split(":");
                    deHora.push(min[0]);
                    deMin.push(min[1]);
                });

                if(hora1 != ""){
                    ih1 = getIndice(hora1,deHora);
                }
                if(hora2 != ""){
                    ih2 = getIndicef(hora2,deHora);
                }

                deMin = getArraySeg(ih1,ih2,deMin);
                horas = getArraySeg(ih1,ih2,horas);
                datos = getArraySeg(ih1,ih2,datos);

                if(minuto1 != ""){
                    im1 = getIndice(minuto1,deMin);
                }
                if(minuto2 != ""){
                    im2 = getIndicef(minuto2,deMin);
                }

                if(im2 < im1){
                    im1 = 0;
                    im2 = deMin.length -1;
                }

                horas = getArraySeg(im1,im2,horas);
                datos = getArraySeg(im1,im2,datos);
                salida = {}
                salida.horas = horas;
                salida.datos = datos;
                return salida;
            }

            function getDatosemg(datos1,datos2,datos3,hora1,minuto1,hora2,minuto2, segundo1,segundo2){

                var horas = "#{file.horas}";
                horas = horas.split(",");
                var deHora = [];
                var deMin = [];
                var horac = [];
                var deSeg = [];
                var ih1 = 0; 
                var im1 = 0;
                var is1 = 0;
                var ih2 = horas.length - 1;
                var im2 = horas.length - 1;
                var is2 = horas.length - 1;
                horas.forEach(function(valor, indice, array){
                    var min = valor.split(":");
                    deHora.push(min[0]);
                    deMin.push(min[1]);
                    deSeg.push(min[2]);
                });

                if(hora1 != ""){
                    ih1 = getIndice(hora1,deHora);
                }
                if(hora2 != ""){
                    ih2 = getIndicef(hora2,deHora);
                }

                deMin = getArraySeg(ih1,ih2,deMin);
                deSeg = getArraySeg(ih1,ih2,deSeg);
                horas = getArraySeg(ih1,ih2,horas);
                datos1 = getArraySeg(ih1,ih2,datos1);
                datos2 = getArraySeg(ih1,ih2,datos2);
                datos3 = getArraySeg(ih1,ih2,datos3);


                if(minuto1 != ""){
                    im1 = getIndice(minuto1,deMin);
                }
                if(minuto2 != ""){
                    im2 = getIndicef(minuto2,deMin);
                }

                if(im2 < im1){
                    im1 = 0;
                    im2 = deMin.length -1;
                }

                deSeg = getArraySeg(im1,im2,deSeg);
                horas = getArraySeg(im1,im2,horas);
                datos1 = getArraySeg(im1,im2,datos1);
                datos2 = getArraySeg(im1,im2,datos2);
                datos3 = getArraySeg(im1,im2,datos3);
                
                if(segundo1 != ""){
                    is1 = getIndice(segundo1, deSeg);
                }                
                if(segundo2 != ""){
                    is2 = getIndicef(segundo2, deSeg);  
                }

                horas = getArraySeg(is1,is2,horas);
                datos1 = getArraySeg(is1,is2,datos1);
                datos2 = getArraySeg(is1,is2,datos2);
                datos3 = getArraySeg(is1,is2,datos3);
                
                salida = {}
                salida.horas = horas;
                salida.datos1 = datos1;
                salida.datos2 = datos2;
                salida.datos3 = datos3;
                return salida;
            }

            function getIndice(dato,array){
                var index = array.findIndex(ref => ref >= dato);
                if(index == -1){
                    index = 0;
                }
                return index;
            }

            function getIndicef(dato,array){
                var array2 = array.reverse();
                var index = array2.findIndex(ref => ref <= dato);
                if(index == -1){
                    index = 0;
                }
                index = (array.length -1) - index;
                return index;
            }

            function getArraySeg(indice1,indice2,array){
                const index2 = indice2 + 1;
                var newarray = array.slice(indice1,index2);
                return newarray;
            }

            function getPorcentaje(minimo,maximo,datos){
                let tamaño = datos.length;
                var p1 = 0;
                var p2 = 0;
                var p3 = 0;
                datos.forEach(function(valor, indice, array){
                    if(valor >= maximo){
                        p3 = p3 +1;
                    }else{
                        if(valor > minimo){
                            p2 = p2 + 1;
                        }else{
                            p1 =p1 + 1;
                        }
                    }

                });       
                p1 = (p1/tamaño)*100;
                p1 = p1.toFixed(1);
                p2 = (p2/tamaño)*100;
                p2 = p2.toFixed(1);
                p3 = (p3/tamaño)*100;
                p3 = p3.toFixed(1);
                var salida = [];
                salida.push(p1);
                salida.push(p2);
                salida.push(p3);
                return salida;
            }

            function graficar1(opcion,id,conf){
                switch(opcion){
                    case "ruido":
                        var ctx = document.getElementById(id).getContext('2d');
                        if(chart1r){
                            chart1r.clear();
                            chart1r.destroy();
                        }

                        chart1r = new Chart(ctx,conf);
                        break;

                    case "luz":
                        var ctx = document.getElementById(id).getContext('2d');
                        if(chart1l){
                            chart1l.clear();
                            chart1l.destroy();
                        }

                        chart1l = new Chart(ctx,conf);
                        break;

                    case "temperatura":
                        var ctx = document.getElementById(id).getContext('2d');
                        if(chart1t){
                            chart1t.clear();
                            chart1t.destroy();
                        }

                        chart1t = new Chart(ctx,conf);
                        break;

                    case "humedad":
                        var ctx = document.getElementById(id).getContext('2d');
                        if(chart1h){
                            chart1h.clear();
                            chart1h.destroy();
                        }

                        chart1h  = new Chart(ctx,conf);
                        break;      

                    case "emg":
                        var ctx = document.getElementById(id).getContext('2d');
                        if(chart1e){
                            chart1e.clear();
                            chart1e.destroy();
                        }

                        chart1e = new Chart(ctx,conf);
                        break;
                }

            }

            function graficar1b(opcion,id,conf){
                var ctx = document.getElementById(id).getContext('2d');
                if(chart1eb){
                    chart1eb.clear();
                    chart1eb.destroy();
                }

                chart1eb = new Chart(ctx,conf);
            }

            function graficar2(opcion,id,conf){
                switch(opcion){
                    case "ruido":
                        var ctx = document.getElementById(id).getContext('2d');
                        if(chart2r){
                            chart2r.clear();
                            chart2r.destroy();
                        }

                        chart2r = new Chart(ctx,conf);
                        break;

                    case "luz":
                        var ctx = document.getElementById(id).getContext('2d');
                        if(chart2l){
                            chart2l.clear();
                            chart2l.destroy();
                        }

                        chart2l = new Chart(ctx,conf);
                        break;

                    case "temperatura":
                        var ctx = document.getElementById(id).getContext('2d');
                        if(chart2t){
                            chart2t.clear();
                            chart2t.destroy();
                        }

                        chart2t = new Chart(ctx,conf);
                        break;

                    case "humedad":
                        var ctx = document.getElementById(id).getContext('2d');
                        if(chart2h){
                            chart2h.clear();
                            chart2h.destroy();
                        }

                        chart2h = new Chart(ctx,conf);
                        break;
                }

            }

            function graficar3(opcion,id,conf){
                switch(opcion){
                    case "ruido":
                        var ctx = document.getElementById(id).getContext('2d');
                        if(chart3r){
                            chart3r.clear();
                            chart3r.destroy();
                        }

                        chart3r = new Chart(ctx,conf);
                        break;

                    case "luz":
                        var ctx = document.getElementById(id).getContext('2d');
                        if(chart3l){
                            chart3l.clear();
                            chart3l.destroy();
                        }

                        chart3l = new Chart(ctx,conf);
                        break;

                    case "temperatura":
                        var ctx = document.getElementById(id).getContext('2d');
                        if(chart3t){
                            chart3t.clear();
                            chart3t.destroy();
                        }

                        chart3t = new Chart(ctx,conf);
                        break;

                    case "humedad":
                        var ctx = document.getElementById(id).getContext('2d');
                        if(chart3h){
                            chart3h.clear();
                            chart3h.destroy();
                        }

                        chart3h = new Chart(ctx,conf);
                        break;
                }

            }


        script.

            const contenedor_imagen_postural = document.getElementById("imagen_postural");
            const btn_procesar = document.getElementById("procesar_imagen");
            const img_no = document.getElementById("imagen_no_process");
            const img_pro = document.getElementById("imagen_process");
            const imprimir = document.getElementById("imprimir");

            imprimir.addEventListener("click", ()=>{
                print();
            });

            btn_procesar.addEventListener("click", ()=>{

                contenedor_imagen_postural.style.display = "inline";
                
                var link1 = "/profile/watch/procs/" + "#{user.identificacion}" + "/" + "#{filenames}" + "/" + "nopro" + "/" + "#{user.filename}";
                var link2 = "/profile/watch/procs/" + "#{user.identificacion}" + "/" + "#{filenames}" + "/" + "pro" + "/" + "#{user.filename}";
                console.log("listo");
                img_no.setAttribute("src",link1);
                img_pro.setAttribute("src",link2);
            });